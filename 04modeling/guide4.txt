Work through the following materials this week, making sure that you can do the given activities:

Read Chapter 14 (focus primarily on Sections 14.1-2, 14.3.1-3, 14.5-6) — It’s ok to submit rather fuzzy or even empty answers on the material specifically marked for Wednesday’s discussion.
Explain the four informal guidelines discussed in Section 14.1.

	Making sure that the semantics of the attributes is clear in the schema
		"In general, the easier it is  to explain the semantics of the relation, or in other words, what a relation exactly means and stands for-
		the better the relation schema design will be"

	Reducing the redundnat information in tuples
		Databases take up alot of memory, so reducing data saves memory, and cleans up the DB schema.	

	Reducing the NULL values in tuples
		"NULL values can waste space and may also lead to problems with understanding the maning of the attributes and with specifying operations 
		at the logical level"
	
	Disallowing the possiblility of generating spurious tuples.
		Spurious tuples are tuples that represent spurious information that is not valid. Bad design can lead to spurious tuples when joins are applied.


Explain the terms functional dependency (for Monday, see Section 14.2) and multi-valued dependency (for Wednesday, see Section 14.6) by giving an example of
 each and showing how it satisfies the term’s formal definition.
	"A functional dependency is a constraint between two sets of attributes from the database."
	"A functional dependency, denoted by X -> Y, between two sets of attributes X and Y that are subsets of R specifies a constraint on the possible 
	tuples that can form a relation state r of R. The constraint is that, for ay two typles t_1 and t_2 in r that have t_1[X]=t_2[X], the must also 
	have t_1[Y]=t_2[Y]" If we had a table with the names and SSNs of people, then the SSN -> the names, but names do not determine the SSNs.

	Multi-valued dependecy:  
		 if we denote by {\displaystyle (x,y,z)} (x,y,z) the tuple having values for {\displaystyle \alpha ,} \alpha, {\displaystyle \beta ,} \beta , 
		{\displaystyle R-\alpha -\beta } R-\alpha -\beta  collectively equal to {\displaystyle x,} x, {\displaystyle y,} y, {\displaystyle z,} z, 
		correspondingly, then whenever the tuples {\displaystyle (a,b,c)} (a,b,c) and {\displaystyle (a,d,e)} (a,d,e) exist in {\displaystyle r} r, 
		the tuples {\displaystyle (a,b,e)} (a,b,e) and {\displaystyle (a,d,c)} (a,d,c) should also exist in {\displaystyle r} r. (Wiki)
	
Review the formal definitions of these terms: superkey; key (see Section 14.3.3).
	A superkey of a relation schema R is a set of attributes S with the property that no two tuples will be equivalent
	Key: a superkey with a miminal amount of fields

Explain BCNF (for Monday, see Section 14.5) and 4NF (for Wednesday, see Section 14.6) by giving an example relation and proving whether its schema conforms (or fails to conform) to the definitions of each normal form.
	BCNF
		A relation schema R is in BCNF if whenevery a nontrivial functional dependency X -> A holds in R, then X is a superkey of R.
	
	fourth normal form
		A relation schema R is in 4NF with respect to a set of depencdencies F (that includes functional dependencies and myltivaled dependencies) if, for every nontrivial multivalued dependency x ->> f^+, X 
		is a superkey for R
Explain when one would one want to normalize a relational schema and when one might want to de-normalize one.
	When one first designs a DB or when a database is aquired and the quality is tested.
	
	Denormalization: is the process of storing and join of jigher normal form relations as a base relation, whic is in a lower normal form.
	One may want to denormalize when they want an increase in performance (i.e. query speed).

Review Section 15.1.1 well enough to be able to define Armstrong’s axioms (IR1–3) and closures.

 IR1: (reflexive rule): if X subset Y, then x -> Y
 IR2: (augmentation rule): {X -> Y} |= XZ -> YZ
 IR3: (transitive rule): {X -> Y, Y-> Z} |= x -> Z

 Closure: For each such set of attributes X, we determine the set X^+ of attributes that are functionally 
 determined by X based on F; X^+ is called the closure of X under F
