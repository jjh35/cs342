Work through the following materials this week, making sure that you can do the given activities.

Chapter 17

B+ Trees — Focus on the Section 17.3 (skipping the material on algorithms).
Compare and contrast B-trees and B+-trees.

	A B-tree is a binary tree that is alwyas balanced. Thus the tree may be re-balanced after insertions/deletes.
	A B+ tree every value of the search field appears once at some level in the tree, along with the data pointer.

	Thus both are balanced, but a b+ tree has additional data pointers and values

	Explain what it means for such a tree to be balanced.

Compare and contrast tree and data pointers.
	A data pointer  points to a file block.
	Trees hold data pointers.

Explain the nature of multiple-attribute indexes (see the introduction to Section 17.4).
	Often, one will want to access files that use multiple attributes as keys. So one may set 
	up an access system that uses multiple attributes as a key.

Explain the nature of hash and bitmap indexes (see Sections 17.5.1–2).
	The hash index i a secondary structure to access the file by using hashing 
	on a search key other than the one used for the primary data file organization.
	The bitmap index uses querying on multiple keys. It creates an index for one or more 
	columns and each value or value range in these columns is indexed.

Physical Database Design — Focus on the Section 17.7.
Explain the concept of physical database design (PDD).
	The performance of queries largely depends upon what indexes or hashing schemes are used to evaluate selections and joins. 
	So one must choose what indexing system to use to improve efficiancy.


Compare and contrast the uses for B-tree, hash and bitmap indexes in PDD.
B-trees support both equality and range queries on the attributes use as the search ikey. ISAM and Hash indecies work well with equality conditions, 
particulary during joins t ofind a matching records.

Explain whether denormalization should be considered a form of PDD.
	Denormalization will minimize the needs for joins, so it may be more efficient for queries. Thus
	if one is designing a PDD, then using a system that will allow for fast quries may be a good idea.


Chapter 18

Explain the concept of query optimization (see the introduction to the chapter).
	"A query has many possible execution strategies, and the process of choosing a suitable 
	one for processing a query is known as query optimitzation"


Oracle’s EXPLAIN PLAN

Load the small version of the Internet Movie DB defined in the repo (cs342/databases/imdb), configure the auto-trace facility in SQL*Plus (SET SERVEROUTPUT ON; & SET AUTOTRACE ON;) and generate an execuation plan for some simple query. What is the execution plan operation used and what does that operation do?


Explain at least the following operations (see Oracle Execution Plan Operations).

TABLE ACCESS FULL
	This is also known as full table scan. Reads the entire table—all rows and columns—as stored on the disk. 
	Although multi-block read operations improve the speed of a full table scan considerably, it is still one of 
	the most expensive operations. Besides high IO rates, a full table scan must inspect all table rows so it can
	also consume a considerable amount of CPU time. 
TABLE ACCESS BY INDEX
	"Retrieves a row from the table using the ROWID retrieved from the preceding index lookup"
NESTED LOOPS
	Joins two tables by fetching the result from one table and querying the other table for each row from the first.
HASH JOIN
	The hash join loads the candidate records from one side of the join into a hash 
	table that is then probed for each row from the other side of the join. 
INDEX UNIQUE SCAN
	The INDEX UNIQUE SCAN performs the B-tree traversal only. The database uses this operation 
	if a unique constraint ensures that the search criteria will match no more than one entry.